From 9891fe823827f133772150f752b94fd9c26e0c6b Mon Sep 17 00:00:00 2001
From: 0xFFFC0000 <0xFFFC0000@proton.me>
Date: Tue, 22 Apr 2025 13:22:02 +0000
Subject: [PATCH 1/2] epee: fix string_tools on Windows

---
 contrib/epee/src/string_tools.cpp | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/contrib/epee/src/string_tools.cpp b/contrib/epee/src/string_tools.cpp
index 36356d77e..94c0fd763 100644
--- a/contrib/epee/src/string_tools.cpp
+++ b/contrib/epee/src/string_tools.cpp
@@ -153,11 +153,15 @@ namespace string_tools
 
   void set_module_name_and_folder(const std::string& path_to_process_)
   {
-    boost::filesystem::path path_to_process = path_to_process_;
+    boost::filesystem::path path_to_process;
 
 #ifdef _WIN32
-    path_to_process = get_current_module_path();
-#endif 
+    // Convert to wide string to avoid codecvt errors with Unicode paths
+    std::wstring wpath = epee::string_tools::utf8_to_utf16(get_current_module_path());
+    path_to_process = boost::filesystem::path(wpath);
+#else
+    path_to_process = boost::filesystem::path(path_to_process_);
+#endif
 
     get_current_module_name() = path_to_process.filename().string();
     get_current_module_folder() = path_to_process.parent_path().string();
-- 
2.43.0


From fe6cecec6545a66130f5d067cd21a427c1859dfc Mon Sep 17 00:00:00 2001
From: Fountain5405 <Fountain5405@keepd.com>
Date: Thu, 3 Jul 2025 00:32:46 -0400
Subject: [PATCH 2/2] Add Shadow network simulator compatibility

- Add SHADOW_BUILD CMake option to enable compatibility mode
- Patch performance_utils.h to skip pthread scheduling operations
- Skip pthread_setaffinity_np and pthread_setschedprio in Shadow builds
- These operations cause 'Operation not permitted' errors in Shadow

Shadow's process emulation doesn't support thread affinity/priority
modifications, but basic threading primitives work fine.
---
 CMakeLists.txt                              |  6 ++++++
 tests/performance_tests/performance_utils.h | 12 ++++++++++++
 2 files changed, 18 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 417755848..b5303302c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -391,6 +391,12 @@ if(PER_BLOCK_CHECKPOINT)
   add_definitions("-DPER_BLOCK_CHECKPOINT")
 endif()
 
+option(SHADOW_BUILD "Build with Shadow network simulator compatibility" OFF)
+if(SHADOW_BUILD)
+  add_definitions("-DSHADOW_BUILD")
+  message(STATUS "Shadow network simulator compatibility enabled")
+endif()
+
 list(INSERT CMAKE_MODULE_PATH 0
   "${CMAKE_SOURCE_DIR}/cmake")
 
diff --git a/tests/performance_tests/performance_utils.h b/tests/performance_tests/performance_utils.h
index 44d5eded8..a00e42b9e 100644
--- a/tests/performance_tests/performance_utils.h
+++ b/tests/performance_tests/performance_utils.h
@@ -53,11 +53,17 @@ void set_process_affinity(int core)
   cpu_set_t cpuset;
   CPU_ZERO(&cpuset);
   CPU_SET(core, &cpuset);
+#ifdef SHADOW_BUILD
+  // Skip pthread_setaffinity_np in Shadow network simulator
+  // Shadow's process emulation doesn't support thread affinity operations
+  std::cout << "pthread_setaffinity_np - SKIPPED (Shadow build)" << std::endl;
+#else
   if (0 != ::pthread_setaffinity_np(::pthread_self(), sizeof(cpuset), &cpuset))
   {
     std::cout << "pthread_setaffinity_np - ERROR" << std::endl;
   }
 #endif
+#endif
 }
 
 void set_thread_high_priority()
@@ -75,10 +81,16 @@ void set_thread_high_priority()
   ::pthread_attr_getschedpolicy(&attr, &policy);
   max_prio_for_policy = ::sched_get_priority_max(policy);
 
+#ifdef SHADOW_BUILD
+  // Skip pthread_setschedprio in Shadow network simulator  
+  // Shadow's process emulation doesn't support thread priority operations
+  std::cout << "pthread_setschedprio - SKIPPED (Shadow build)" << std::endl;
+#else
   if (0 != ::pthread_setschedprio(::pthread_self(), max_prio_for_policy))
   {
     std::cout << "pthread_setschedprio - ERROR" << std::endl;
   }
+#endif
 
   ::pthread_attr_destroy(&attr);
 #endif
-- 
2.43.0

