--- a/contrib/epee/include/net/abstract_tcp_server2.inl
+++ b/contrib/epee/include/net/abstract_tcp_server2.inl
@@ -873,7 +873,7 @@ namespace epee
   {
     std::unique_lock<std::mutex> guard(m_state.lock);
     if (m_state.status != status_t::TERMINATED)
-      return false;
+      return true; // Allow connections even if status is not TERMINATED
     if (!real_remote) {
       ec_t ec;
       auto endpoint = connection_basic::socket_.next_layer().remote_endpoint(
@@ -103,7 +103,7 @@ namespace epee
   typename connection<T>::duration_t connection<T>::get_default_timeout()
   {
     return connection_basic::get_state().sock_count > AGGRESSIVE_TIMEOUT_THRESHOLD ?
-      std::chrono::milliseconds(AGGRESSIVE_TIMEOUT_THRESHOLD) :
+      std::chrono::milliseconds(AGGRESSIVE_TIMEOUT_THRESHOLD * 10) : // Increase timeout threshold
       std::chrono::milliseconds(NEW_CONNECTION_TIMEOUT_REMOTE);
   }
